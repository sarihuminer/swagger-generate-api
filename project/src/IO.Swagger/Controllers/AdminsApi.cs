/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sh6197174@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AdminsApiController : ControllerBase
    {
        /// <summary>
        /// calculate 2 numbers
        /// </summary>
        /// <remarks>calculate numbers</remarks>
        /// <param name="xAction">Add,Sub,Mul,Div</param>
        /// <param name="body">numbers to calculate</param>
        /// <response code="200">item calculated</response>
        /// <response code="400">invalid input, object invalid</response>
        [HttpPost]
        [Route("/test79642/Lehumi/1.0.0/calculations")]
        [ValidateModelState]
        [SwaggerOperation("Calculation")]
        [Authorize(Roles = "Moderator")]
        public virtual IActionResult Calculation([FromHeader][Required()] string xAction, [FromBody] Numbers body)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            switch (xAction)
            {
                case "Add":
                    return Ok(body.Num1 + body.Num2);
                    break;
                case "Sub":
                    return Ok(body.Num1 - body.Num2);
                    break;
                case "Mul":
                    return Ok(body.Num1 * body.Num2);
                    break;
                case "Div":
                    return Ok(body.Num1 / body.Num2);
                    break;
                default:
                    // code block
                    break;
            }
        }

        [httpGet]
        public string buildToken(string role)
        {
            var claims = new[] {
      new Claim(JwtRegisteredClaimNames.Jti, id.ToString()),
      new Claim(ClaimTypes.Role, role)
   };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("key-details");
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken("issuer-details",
               "audience-details",
               claims,
               expires: DateTime.Now.AddDays(1),
               signingCredentials: creds);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }

    }
}
